// @import .scss => styles
div(className='{styles.root}')
  main(role='main')
    //- Main jumbotron for a primary marketing message or call to action
    .container
      //- pre {JSON.stringify(size)}
      //- img(src='{emoji[0].img}')

      //- pre {JSON.stringify(state, null, 2)}

      .row
        .col-sm-12

          //- h3 user: {userId}, {userIndex}
          strong round: {round}
          button.btn.btn-outline-secondary(type='button',
            onClick='{handleAddClick}')
            | 다음 레벨


          button.btn.btn-outline-secondary(type='button',
            onClick='{handleNoMatchClick}')
            | 결
          .pull-right
            button.btn.btn-outline-secondary(type='button',
              onClick='{handleResetClick}')
              | RESET
            button.btn.btn-outline-secondary(type='button',
              onClick='{handleClearAllClick}')
              | CLEAR ALL
          svg(viewBox='{"0 0 " + size.width + " " + size.height}',
            style="{{ border: '2px solid red' }}")

            defs
              clipPath(id="cut-off-bottom")
                rect.card(x='0', y='0',
                  rx='10',
                  width='120', height='120')
                //- <clipPath id="cut-off-bottom">
                //-   <rect x="0" y="0" width="200" height="100" />
                //- </clipPath>
              linearGradient(y2="0.50524" x2="1" y1="0.50524" x1="0" id="imagebot_164" xlink:href="#imagebot_173")
              linearGradient(id="imagebot_173")
                stop(stop-color="#ffffff" offset="0" id="imagebot_179")
                stop(stop-color="#ffffff" offset="1" stop-opacity="0" id="imagebot_178")
              
              linearGradient(y2="1.10041" x2="0.94467" y1="0.26833" x1="0.45023" id="imagebot_155" xlink:href="#imagebot_174")
              linearGradient(id="imagebot_174")
                stop(stop-color="#e5e5e5" offset="0")
                stop(stop-color="#dfdfdf" offset="1")

            //- g(@for='(shape, key, i) in shapes',
              transform='{"translate(" + shape.path.edge.x + "," + shape.path.edge.y + ")"}')
              
            //- g( perspective="115 50 -200" transform="translate(0 10) rotateY(-90 0 50)" )
            //- g(transform="rotate(-10 50 100) translate(-36 45.5) skewX(40) scale(1 0.5)")
            //- g
              image(xlink:href="{emoji[0].img}" x="0" y="370" height="120px" width="120px")
            g
              g(@for='(user, key, i) in users')
                rect(@if='userId === user.userId',
                  x='10', y='{i * 70 + 20}', width='100px', height='60px', fill='yellow')
                text(x='100', y='{i * 70 + 40}') {user.score}
                image(xlinkHref="{emoji[i + 12].img}" x="20" y='{i * 70 + 20}' height="60px" width="60px")
                


            g(transform='translate(200, 0)')

              g(@for='(shape, key, i) in shapes',
                transform='{"translate(" + shape.path.edge.x + "," + shape.path.edge.y + ")"}',
                data-card-num='{i + 1}',
                onClick='{handleCardClick}'

                onDblClick='{handleClickCancel}')
                //- onClick='{handleCarzClick}')

                //- className='{cx(styles.tile, answer.indexOf(i + 1) !== -1 && styles.selected ,"tile-" + card.shape, "tile-" + card.color, "tile-bg-" + card.bgColor)}')

                rect(@if='answer.indexOf(i + 1) !== -1'
                  x='-5', y='-5',
                  rx='10',
                  width='130', height='130'
                  fill="red"
                  stroke="red", strokeWidth="5")

                

                rect.card(x='0', y='0',
                  rx='10',
                  width='120', height='120',
                  //- stroke='black',
                  //- strokeWidth='{0.5}',
                  fill='none',
                  className='{"bg-" + shape.bgColor}',
                  clip-path="url(#cut-off-bottom)")
                rect.border(x='0', y='0',
                  rx='10',
                  width='120', height='120',
                  stroke='black',
                  strokeWidth='{0.5}',
                  fill='none')
                  
                path(transform="translate(20, 20)",
                  className='{cx(shape.shape, shape.color)}')
                path.shade(clip-path="url(#cut-off-bottom)")

                circle(cx="0" cy="0" r="16" fill="#fff" stroke="black" strokeWidth='{0.5}')
                text(x='0', y='0'
                  alignmentBaseline="middle"
                  textAnchor="middle") {i + 1}
          
          
            g(transform='translate(650, 20)')
              text(@for='(each, key, i) in solved',
                x='0', y='{i * 40}')
                | {each.answer}
          //- pre {JSON.stringify(users, null, 2)}
        //- .col-sm-3

          //- ul(@if='cards', className='{styles.tileWrap}')
            li(@for='(card, key, i) in cards',
              data-card-num='{i + 1}',
              onClick='{handleCardClick}'

              onDblClick='{handleClickCancel}'
              className='{cx(styles.tile, answer.indexOf(i + 1) !== -1 && styles.selected ,"tile-" + card.shape, "tile-" + card.color, "tile-bg-" + card.bgColor)}')
              span(className='{styles.badge}') {i + 1}
          
          //- svg(key='{sKey}',
            //- xlinkHref
            xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink"
            width='500', height='500', viewBox='0 0 500 500'
            style='{{ background: "lightyellow" }}')
            defs
              clipPath(id="cut-off-bottom")
                rect.card(x='0', y='0',
                  rx='10',
                  width='120', height='120')
                //- <clipPath id="cut-off-bottom">
                //-   <rect x="0" y="0" width="200" height="100" />
                //- </clipPath>
              linearGradient(y2="0.50524" x2="1" y1="0.50524" x1="0" id="imagebot_164" xlink:href="#imagebot_173")
              linearGradient(id="imagebot_173")
                stop(stop-color="#ffffff" offset="0" id="imagebot_179")
                stop(stop-color="#ffffff" offset="1" stop-opacity="0" id="imagebot_178")
              
              linearGradient(y2="1.10041" x2="0.94467" y1="0.26833" x1="0.45023" id="imagebot_155" xlink:href="#imagebot_174")
              linearGradient(id="imagebot_174")
                stop(stop-color="#e5e5e5" offset="0")
                stop(stop-color="#dfdfdf" offset="1")

            //- g(@for='(shape, key, i) in shapes',
              transform='{"translate(" + shape.path.edge.x + "," + shape.path.edge.y + ")"}')
              
            //- g( perspective="115 50 -200" transform="translate(0 10) rotateY(-90 0 50)" )
            //- g(transform="rotate(-10 50 100) translate(-36 45.5) skewX(40) scale(1 0.5)")
            g
              image(xlink:href="{emoji[0].img}" x="0" y="370" height="120px" width="120px")
            g

              g(@for='(shape, key, i) in shapes',
                transform='{"translate(" + shape.path.edge.x + "," + shape.path.edge.y + ")"}')
                rect.card(x='0', y='0',
                  rx='10',
                  width='120', height='120',
                  //- stroke='black',
                  //- strokeWidth='{0.5}',
                  fill='none',
                  className='{"bg-" + shape.bgColor}',
                  clip-path="url(#cut-off-bottom)")
                rect.border(x='0', y='0',
                  rx='10',
                  width='120', height='120',
                  stroke='black',
                  strokeWidth='{0.5}',
                  fill='none')
                  
                path(transform="translate(20, 20)",
                  className='{cx(shape.shape, shape.color)}')
                path.shade(clip-path="url(#cut-off-bottom)")

                circle(cx="0" cy="0" r="16" fill="#fff" stroke="black" strokeWidth='{0.5}')
                text(x='0', y='0'
                  alignmentBaseline="middle"
                  textAnchor="middle") {i + 1}
          //- hr
            svg(width='100', height='100')
              

            svg(width='80', height='80')
              path.diamond
            svg(width='80', height='80')
              path.spade
            svg(width='80', height='80')
              path.club

            svg.red(width='100', height='100')
              path.heart
            svg.green(width='100', height='100')
              path.diamond
            svg.blue(width='100', height='100')
              path.spade
            svg.yellow(width='100', height='100')
              path.club
          //- svg(width='800', height='800')

            //- path(d='m 180,582.36 c 0,0 1.82,-11.153 5.333,-14.667 3.514,-3.514 9.698,-5.333 14.667,-5.333 4.969,0 11.153,1.82 14.667,5.333 3.514,3.514 5.333,9.698 5.333,14.667 0,4.969 -2.667,12 -5.333,14.667 -2.667,2.667 -5.333,4 -8,6.667 -2.667,2.667 -4,2.667 -6.667,5.333 -2.667,2.667 -4,4 -6.667,6.667 -2.667,2.667 -6.667,8 -9.333,13.333 -2.667,5.333 -4,13.333 -4,13.333 0,0 -1.333,-8 -4,-13.333 -2.667,-5.333 -6.667,-10.667 -9.333,-13.333 -2.667,-2.667 -4,-4 -6.667,-6.667 -2.667,-2.667 -4,-2.667 -6.667,-5.333 -2.667,-2.667 -5.333,-4 -8,-6.667 C 142.666,594.36 140,587.329 140,582.36 c 0,-4.969 1.82,-11.153 5.333,-14.667 3.514,-3.514 9.698,-5.333 14.667,-5.333 4.969,0 11.153,1.82 14.667,5.333 3.514,3.514 5.333,14.667 5.333,14.667'
              fill='black')
            //- path(d='m 180,562.36 c 0,0 8,13.333 17.333,22.667 9.333,9.333 22.667,17.333 22.667,17.333 0,0 -13.333,8 -22.667,17.333 C 188,629.026 180,642.36 180,642.36 c 0,0 -8,-13.333 -17.333,-22.667 C 153.334,610.36 140,602.36 140,602.36 c 0,0 13.333,-8 22.667,-17.333 C 172,575.694 180,562.36 180,562.36'
            //-   fill='black')
            //- path(d='m 180,562.37 c -3.999,-0.082 -6.667,1.333 -9.333,4 -2.667,2.667 -4,5.333 -4,9.333 0,4 1.518,6.372 4,9.333 2.375,2.833 4,4 5.333,6.666 1.333,2.667 2.667,8 2.667,10.666 0,2.667 0,2.398 0,4 H 176 c -2.667,0 -8,-2.667 -9.333,-4 l -4,-4 c -2.667,-2.667 -5.333,-4 -9.333,-4 -4,0 -6.667,1.333 -9.333,4 -2.667,2.667 -4,5.333 -4,9.333 0,4 1.333,6.666 4,9.333 2.667,2.667 5.333,4 9.333,4 4,0 6.667,-1.333 9.333,-4 l 4,-4 c 1.333,-1.333 6.667,-4 9.333,-4 h 2.667 c -0.066,3.776 -0.346,10.37 -1.333,13.333 -1.333,4 -4,8 -6.667,10.666 -2.667,2.667 -10.667,8 -10.667,8 v 1.333 c 0,0 13.333,-2.667 16,-2.667 h 8 c 2.667,0 16,2.667 16,2.667 v -1.333 c 0,0 -8,-5.333 -10.667,-8 -2.667,-2.667 -5.333,-6.666 -6.667,-10.666 -0.988,-2.963 -1.267,-9.557 -1.333,-13.333 H 184 c 2.667,0 8,2.667 9.333,4 l 4,4 c 2.667,2.667 5.333,4 9.333,4 4,0 6.667,-1.333 9.333,-4 2.667,-2.667 4,-5.333 4,-9.333 0,-4 -1.333,-6.666 -4,-9.333 -2.667,-2.667 -5.333,-4 -9.333,-4 -4,0 -6.667,1.333 -9.333,4 l -4,4 c -1.333,1.333 -6.667,4 -9.333,4 h -2.667 c 0,-1.855 0,-1.333 0,-4 0,-2.667 1.333,-8 2.667,-10.666 1.333,-2.667 2.667,-4 5.333,-6.666 2.653,-2.653 4,-5.333 4,-9.333 0,-4 -1.333,-6.666 -4,-9.333 -2.667,-2.667 -5.333,-4 -9.333,-4',
            //-   fill='black')
            //- path(d='m 180,562.36 c -1.333,6.667 -2.855,8.392 -5.333,12 -2.135,3.109 -5.122,5.562 -8,8 -2.917,2.471 -6.248,4.408 -9.333,6.667 -3.586,2.625 -7.819,4.588 -10.667,8 -3.184,3.815 -6.667,8.364 -6.667,13.333 0,3.975 2.408,7.975 5.333,10.667 3.523,3.241 8.548,5.444 13.333,5.333 5.369,-0.124 10.8,-2.94 14.667,-6.667 2.862,-2.758 5.333,-10.667 5.333,-10.667 v 2.667 c 0,1.333 -0.133,7.29 -1.333,10.667 -1.404,3.951 -3.83,7.579 -6.667,10.667 -3.01,3.273 -10.667,8 -10.667,8 v 1.333 c 0,0 10.612,-2.221 16,-2.667 2.658,-0.22 5.342,-0.22 8,0 5.388,0.446 16,2.667 16,2.667 v -1.333 c 0,0 -7.66,-4.727 -10.667,-8 -2.836,-3.088 -5.263,-6.716 -6.667,-10.667 -1.2,-3.376 -1.333,-10.667 -1.333,-10.667 v -2.667 c 0,0 2.471,7.908 5.333,10.667 3.867,3.726 9.298,6.543 14.667,6.667 4.786,0.11 9.811,-2.092 13.333,-5.333 2.925,-2.692 5.333,-6.691 5.333,-10.667 0,-4.969 -3.483,-9.518 -6.667,-13.333 -2.848,-3.412 -7.08,-5.375 -10.667,-8 -3.085,-2.258 -6.416,-4.195 -9.333,-6.667 -2.878,-2.438 -5.865,-4.891 -8,-8 -2.478,-3.608 -4,-5.333 -5.333,-12',
            //-   fill='black')
            g(@for='(shape, key, i) in shapes',
              transform='{"translate(" + shape.path.edge.x + "," + shape.path.edge.y + ")"}')
              
              //- translate(20,2.5) rotate(10)"
              //- x='{shape.path.edge.x + 10}',
              //- y='{shape.path.edge.y + 10}')
              rect(width='80', height='80',
                stroke='black',
                strokeWidth='{0.5}',
                fill='none',
                x='{0}',
                y='{0}')
              text(
                x='{0}',
                y='{0}')
                | {i}

          //- pre {JSON.stringify(shapes, null, 2)}

          //- h1 {JSON.stringify(answer)}
        //- .col-sm-3
          //- h1 answers
          //- pre {JSON.stringify(solved, null, 2)}
          //- hr
          pre {JSON.stringify(answers, null, 2)}

          //- pre {JSON.stringify(scores, null, 2)}

      //- h4 {userIndex}, {userId}
      //- div(@if='userIndex !== -1')

      //- input.form-control(type='text', ref='{inputEl}')

        //- button.btn.btn-outline-secondary(type='button',
          onClick='{handleClearPClick}')
          | CLEAR MSG
        //- h4 {userIndex}, {userId}
        //- pre {JSON.stringify(state, null, 2)}
        //- ul(@if='state.messages')
          li(@for='message in state.messages')
            | {message}
        //- pre {JSON.stringify(state, null, 2)}
        //- pre {JSON.stringify(state.currentPlayer, null, 2)}
        pre {JSON.stringify(state.users, null, 2)}

          //- | {i + 1}
      


              //- .tile-wrap
                    .tile(ng-repeat='tile in vm.store.tiles',
                      ng-class='{ hl: vm.hlNums[$index + 1] }',
                      class='tile-{{ tile.shape }} tile-{{ tile.color }} tile-bg-{{ tile.bgColor }}')
   
    //- .jumbotron
      //- .container(ref='{clientRef}')
        h1.display-3 Rect: {rect.width} x {rect.height}
        p
          | This is a template for a simple marketing or informational website. It includes a large callout called a jumbotron and three supporting pieces of content. Use it as a starting point to create something more unique.
        p
          a.btn.btn-primary.btn-lg(href='#', role='button') Learn more »